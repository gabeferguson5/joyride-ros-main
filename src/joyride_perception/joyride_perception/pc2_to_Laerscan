import rclpy
from rclpy.node import Node
from sensor_msgs.msg import PointCloud2, LaserScan
import sensor_msgs_py.point_cloud2 as pc2
import math

class PointCloudToLaserScanNode(Node):
    def __init__(self):
        super().__init__('pc2_scan_publisher')


        
        self.publisher = self.create_publisher(LaserScan, '/Pseudo_Laser',10)
        self.subscriber =self.create_subscription(PointCloud2,'/perception/center/lanes_point_cloud',self.pointcloud_callback, 10)



    def pointcloud_callback(self, pointcloud_msg):
        # Callback function to handle incoming PointCloud2 messages
        scan_msg = self.convert_pointcloud_to_laserscan(pointcloud_msg)
        self.publisher.publish(scan_msg)

    def convert_pointcloud_to_laserscan(self, pointcloud_msg):
        # Function to convert PointCloud2 to LaserScan
        scan_msg = LaserScan()

        # Set the laser scan parameters
        scan_msg.header = pointcloud_msg.header
        scan_msg.angle_min = -1.0
        scan_msg.angle_max = 1.0
        scan_msg.angle_increment = 1/3000
        scan_msg.range_min = 0.0
        scan_msg.range_max = 10.0  

        # Extract range values from the point cloud
        ranges = []
        for point in pc2.read_points(pointcloud_msg, field_names=("x", "y", "z"), skip_nans=True):
            distance = math.sqrt(point[0]**2 + point[1]**2)
            print(distance)
            ranges.append(distance)

        scan_msg.ranges = ranges

        return scan_msg

def main(args=None):
    rclpy.init(args=args)
    pc2_scan_publisher = PointCloudToLaserScanNode()
    rclpy.spin(pc2_scan_publisher)
    rclpy.shutdown()

if __name__ == '__main__':
    main()